apply plugin: 'maven-publish'

afterEvaluate {
    publishing {
        publications {
            mavenAar(MavenPublication) {
                groupId mavenGroupId
                artifactId mavenArtifactId
                version pkgVersion
                artifact project.tasks.bundleReleaseAar
                // Add source code and Javadoc to the published AAR file
                artifact androidJavadocsJar
                artifact androidSourcesJar
            }
        }

        repositories {
            maven {
                def releasesRepoUrl = "$mavenPublishUrl/maven-releases"
                def snapshotsRepoUrl = "$mavenPublishUrl/maven-snapshots"
                url = pkgVersion.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username = getDefaultProperties().get("LDAP_ACCOUNT")
                    password = getDefaultProperties().get("LDAP_PWD")
                }
            }
        }
    }
}

task generateAarAndPublish {
    dependsOn 'clean'
    dependsOn 'publish'
}

task aar {
    dependsOn 'assemble'
}

/**
 * Error reporting, does not affect upload task
 */
task androidJavadocs(type: Javadoc) {

    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            //BuildConfig Class Not Found
            source += variant.javaCompileProvider.get().source
            //Dependencies  Library Class Not Found
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
    //ignore doc lint
    options.addStringOption('Xdoclint:none', '-quiet')
    //ignore build fail
    failOnError false
}

task androidJavadocsJar(type: Jar) {
    dependsOn androidJavadocs
    archiveClassifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}









